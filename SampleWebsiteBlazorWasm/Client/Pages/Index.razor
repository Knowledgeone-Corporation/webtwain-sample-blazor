@page "/"
@inject IJSRuntime jsRuntime
@using SampleWebsiteBlazorWasm.Shared

<div>
    <h1>Scan Demo Page: Blazor</h1>
</div>
<div class="alert alert-info alert-dismissible show" role="alert">
    <strong>Note: </strong>The demonstration service has the following limitations;
    - generated documents contain a watermark,
    - multi-page documents are limited to 10 pages,
    - OCR is limited to the first page of the document.
    These limitations are not present in the licensed product.
</div>

<div class="form-group">
    <label class="scanning-label">Interface Option</label>
    <div>
        <select id="interface-option-dropdown" class="form-control" @bind="SelectedInterface">
            <option value="-1">Please select...</option>
            <option value="0">Hidden : Not using Webtwain or Native UI</option>
            <option value="1">Visible : Uses Webtwain and Native UI</option>
            <option value="2">Web : only uses Webtwain UI</option>
            <option value="3">Desktop : only uses Native scanner UI</option>
        </select>
    </div>

    @switch (SelectedInterface)
    {
        case 0:
            <ScannerInterfaceHidden CompleteAcquire="CompleteAcquire"></ScannerInterfaceHidden>
            break;
        case 1:
            <ScannerInterfaceVisible CompleteAcquire="CompleteAcquire"></ScannerInterfaceVisible>
            break;
        case 2:
            <ScannerInterfaceWeb CompleteAcquire="CompleteAcquire"></ScannerInterfaceWeb>
            break;
        case 3:
            <ScannerInterfaceDesktop CompleteAcquire="CompleteAcquire"></ScannerInterfaceDesktop>
            break;
        default:
            <div></div>
            break;
    }

    <br />

    @if (!string.IsNullOrEmpty(AcquireEvent.AcquireResponse))
    {
        <ScanCompleted Message="@AcquireEvent.AcquireResponse" IsUpload="@AcquireEvent.IsUpload"></ScanCompleted>
    }

    @if (!string.IsNullOrEmpty(AcquireEvent.AcquireError))
    {
        <ScanError Message="@AcquireEvent.AcquireError"></ScanError>
    }
</div>

@code {
    private int? _selectedInterface;

    public AcquireEventModel AcquireEvent = new AcquireEventModel();

    public int? SelectedInterface
    {
        get => _selectedInterface;
        set
        {
            _selectedInterface = value;
            AcquireEvent = new AcquireEventModel();
        }
    }

    private void CompleteAcquire(AcquireEventModel acquireEvent)
    {
        SelectedInterface = -1;
        AcquireEvent = acquireEvent;
        StateHasChanged();
    }
}