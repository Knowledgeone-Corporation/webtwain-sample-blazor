@inject IJSRuntime jsRuntime
@using SampleWebsiteBlazorWasm.Shared

@if(IsDisplayUI) 
{
    <div>
        <div class="twain-feature-group">
            <label class="scanning-label mt-2">Device</label>
            <select @onchange="@((ChangeEventArgs eventArgs) => OnDeviceChange(eventArgs?.Value?.ToString()))" class="form-control">
                @foreach (var item in MappedDevices)
                {
                    <option value="@item.Value">@item.Display</option>
                }
            </select>
        </div>

        @if (MappedSources.Count > 0)
        {
            <div class="twain-feature-group">
                <label class="scanning-label mt-2">Document Source</label>

                <select @onchange="@((ChangeEventArgs eventArgs) => OnSourceChange(eventArgs?.Value?.ToString()))" class="form-control">
                    @foreach (var item in MappedSources)
                    {
                        <option value="@item.Value">@item.Display</option>
                    }
                </select>

            </div>
        }

        @if (MappedResolutionIds.Count > 0)
        {
            <div class="twain-feature-group">
                <label class="scanning-label mt-2">Resolution</label>
                <select @bind="SelectedResolutionId" class="form-control">
                @foreach (var item in MappedResolutionIds)
                {
                    <option value="@item.Value">@item.Display</option>
                }
                </select>

            </div>
        }

        @if (MappedPixelTypeIds.Count > 0)
        {
            <div class="twain-feature-group">
                <label class="scanning-label mt-2">Color</label>
                <select @bind="SelectedPixelTypeId" class="form-control">
                @foreach (var item in MappedPixelTypeIds)
                {
                    <option value="@item.Value">@item.Display</option>
                }
                </select>
            </div>
        }

        @if (MappedPageSizeIds.Count > 0)
        {
            <div class="twain-feature-group">
                <label class="scanning-label mt-2">Page Size</label>
                <select @bind="SelectedPageSizeId" class="form-control">
                @foreach (var item in MappedPageSizeIds)
                {
                    <option value="@item.Value">@item.Display</option>
                }
                </select>
            </div>
        }

        @if (MappedDuplexIds.Count > 0)
        {
            <div class="twain-feature-group">
                <label class="scanning-label mt-2">Duplex Option</label>
                <select @bind="SelectedDuplexId" class="form-control">
                @foreach (var item in MappedDuplexIds)
                {
                    <option value="@item.Value">@item.Display</option>
                }
                </select>
            </div>
        }

        <div class="twain-feature-group">
            <label class="scanning-label mt-2">Output File Name</label>
            <input type="text" @bind="Filename" class="form-control" />
        </div>

        @if (MappedFiletypes.Any())
        {
            <div class="twain-feature-group">
                <label class="scanning-label mt-2">Output File Type</label>
                <select @bind="SelectedFileType" class="form-control">
                    @foreach (var item in MappedFiletypes)
                    {
                        <option value="@item.Value">@item.Display</option>
                    }
                </select>
            </div>
        }

        @if (MappedOcrOptions.Any())
        {
            <div class="twain-feature-group">
                <label class="scanning-label mt-2">OCR Type</label>
                <select @bind="SelectedOcrType" class="form-control">
                    @foreach (var item in MappedOcrOptions)
                    {
                        <option value="@item.Value">@item.Display</option>
                    }
                </select>
            </div>
        }

        @if (MappedSaveToOptions.Any())
        {
            <div class="twain-feature-group">
                <label class="scanning-label mt-2">Save To</label>
                <select @bind="SelectedSaveToType" class="form-control">
                    @foreach (var item in MappedSaveToOptions)
                    {
                        <option value="@item.Value">@item.Display</option>
                    }

                </select>
            </div>
        }

        <br />

        <div class="input-group">
            <div class="input-group-btn">
                <button type="button" class="btn btn-primary" aria-label="Bold" @onclick="OnClick" disabled="@IsDisableScanButton">
                    <span>Scan</span>
                </button>
            </div>
        </div>
    </div>
}

@code {
    private bool IsDisplayUI = false;
    private bool IsDisableScanButton = true;

    public DeviceModel SelectedDevice { get; set; } = null;
    public string SelectedOcrType { get; set; }
    public string SelectedInterfaceType { get; set; }
    public string SelectedFileType { get; set; }
    public string SelectedSaveToType { get; set; }
    public List<DeviceModel> Devices { get; set; } = new List<DeviceModel>();
    public TwainOptionsModel TwainOptions { get; set; }

    public List<MappedOption> MappedDevices { get; set; } = new List<MappedOption>();
    public List<MappedOption> MappedSources { get; set; } = new List<MappedOption>();
    public List<MappedOption> MappedDuplexIds { get; set; } = new List<MappedOption>();
    public List<MappedOption> MappedPageSizeIds { get; set; } = new List<MappedOption>();
    public List<MappedOption> MappedPixelTypeIds { get; set; } = new List<MappedOption>();
    public List<MappedOption> MappedResolutionIds { get; set; } = new List<MappedOption>();

    public List<MappedOption> MappedOcrOptions { get; set; } = new List<MappedOption>();
    public List<MappedOption> MappedFiletypes { get; set; } = new List<MappedOption>();
    public List<MappedOption> MappedSaveToOptions { get; set; } = new List<MappedOption>();

    public string SelectedResolutionId { get; set; }
    public string SelectedDuplexId { get; set; }
    public string SelectedPageSizeId { get; set; }
    public string SelectedPixelTypeId { get; set; }
    public string SelectedSourceId { get; set; }
    public string Filename { get; set; }

    [Parameter]
    public EventCallback<AcquireEventModel> CompleteAcquire {get; set;}

    protected override async Task OnInitializedAsync()
    {
        TwainOptions = await jsRuntime.InvokeAsync<TwainOptionsModel>("k1_Options");
        await jsRuntime.InvokeVoidAsync("k1_setConfig", TwainOptions.ScannerInterface.Hidden);

        var configuration = await jsRuntime.InvokeAsync<object>("k1_renderDesktop");
        await jsRuntime.InvokeVoidAsync("k1_resetService");
        // await Task.Delay(4000);
        IsDisplayUI = true;

        var oDevices = await jsRuntime.InvokeAsync<object>("k1_getDevices");
        var devices = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DeviceModel>>(oDevices.ToString());

        MappedDevices = devices.Select(x => new MappedOption { Display = x.Name, Value = x.Id }).ToList();
        MappedOcrOptions = TwainOptions.OcrType.OcrTypes.Select(x => new MappedOption { Display = x.Key, Value = x.Value }).ToList();
        MappedFiletypes = TwainOptions.OutputFileType.OutputFileTypes.Select(x => new MappedOption { Display = x.Key, Value = x.Value }).ToList();
        MappedSaveToOptions = TwainOptions.SaveToType.SaveToTypes.Select(x => new MappedOption { Display = x.Key, Value = x.Value }).ToList();

        SelectedDevice = devices.FirstOrDefault();
        OnDeviceChange(devices.FirstOrDefault()?.Id);
        SelectedOcrType = MappedOcrOptions.FirstOrDefault()?.Value;
        SelectedFileType = MappedFiletypes.FirstOrDefault()?.Value;
        SelectedSaveToType = MappedSaveToOptions.FirstOrDefault()?.Value;
        Filename = $"ScanFile{new Random().Next(2000000)}";

        await base.OnInitializedAsync();
    }

    async void OnClick(MouseEventArgs mouseEventArgs)
    {
        IsDisplayUI = false;
        var acquireRequest = new
        {
            deviceId = SelectedDevice?.Id ?? "-1",
            filetype = string.IsNullOrEmpty(SelectedFileType) ? "-1" : SelectedFileType,
            ocrType = string.IsNullOrEmpty(SelectedOcrType) ? "-1" : SelectedOcrType,
            filename = string.IsNullOrEmpty(Filename) ? string.Empty : Filename,
            documentSourceId = string.IsNullOrEmpty(SelectedSourceId) ? "-1" : SelectedSourceId,
            resolutionId = string.IsNullOrEmpty(SelectedResolutionId) ? "-1" : SelectedResolutionId,
            pixelTypeId = string.IsNullOrEmpty(SelectedPixelTypeId) ? "-1" : SelectedPixelTypeId,
            pageSizeId = string.IsNullOrEmpty(SelectedPageSizeId) ? "-1" : SelectedPageSizeId,
            duplexId = string.IsNullOrEmpty(SelectedDuplexId) ? "-1" : SelectedDuplexId,
            saveToType = SelectedSaveToType
        };

        try
        {
            var acquireResponse = await jsRuntime.InvokeAsync<string>("k1_acquire", acquireRequest);

            await CompleteAcquire.InvokeAsync(new AcquireEventModel
            {
                AcquireResponse = acquireResponse,
                IsUpload = SelectedSaveToType == TwainOptions.SaveToType.Upload.ToString()
            });
        }
        catch
        {
            await CompleteAcquire.InvokeAsync(new AcquireEventModel
            {
                AcquireError = "Encountered an error. Review console and network logs."
            });
        }

        StateHasChanged();
    }

    async void OnDeviceChange(string deviceId)
    {
        var oDevice = await jsRuntime.InvokeAsync<object>("k1_getDevice", deviceId);

        if (oDevice is null)
        {
            IsDisableScanButton = true;
            SelectedDevice = null;
            MappedDuplexIds = new List<MappedOption>();
            MappedPageSizeIds = new List<MappedOption>();
            MappedPixelTypeIds = new List<MappedOption>();
            MappedResolutionIds = new List<MappedOption>();
            SelectedResolutionId = string.Empty;
            SelectedDuplexId = string.Empty;
            SelectedPageSizeId = string.Empty;
            SelectedPixelTypeId = string.Empty;
            SelectedSourceId = string.Empty;
            MappedSources.Clear();
            StateHasChanged();
            return;
        }

        IsDisableScanButton = false;
        SelectedDevice = Newtonsoft.Json.JsonConvert.DeserializeObject<DeviceModel>(oDevice.ToString());
        MappedSources = SelectedDevice.DocumentSourceIds.Select(x => new MappedOption { Display = x.Value.Name, Value = x.Key }).ToList();
        if(MappedSources != null && MappedSources.Any() && MappedSources.FirstOrDefault() != null)
        {
            OnSourceChange(MappedSources.FirstOrDefault().Value);
        }
        StateHasChanged();
    }

    void OnSourceChange(string documentSourceId)
    {
        if (!SelectedDevice.DocumentSourceIds.ContainsKey(documentSourceId))
        {
            MappedDuplexIds = new List<MappedOption>();
            MappedPageSizeIds = new List<MappedOption>();
            MappedPixelTypeIds = new List<MappedOption>();
            MappedResolutionIds = new List<MappedOption>();
            SelectedResolutionId = string.Empty;
            SelectedDuplexId = string.Empty;
            SelectedPageSizeId = string.Empty;
            SelectedPixelTypeId = string.Empty;
            SelectedSourceId = string.Empty;
            return;
        }

        var selectedDeviceUnit = SelectedDevice.DocumentSourceIds[documentSourceId];

        MappedDuplexIds = selectedDeviceUnit.DuplexIds.Select(x => new MappedOption { Display = x.Value, Value = x.Key }).ToList();
        MappedPageSizeIds = selectedDeviceUnit.PageSizeIds.Select(x => new MappedOption { Display = x.Value, Value = x.Key }).ToList();
        MappedPixelTypeIds = selectedDeviceUnit.PixelTypeIds.Select(x => new MappedOption { Display = x.Value, Value = x.Key }).ToList();
        MappedResolutionIds = selectedDeviceUnit.ResolutionIds.Select(x => new MappedOption { Display = x.Value, Value = x.Key }).ToList();
               
        SelectedSourceId = documentSourceId;
        SelectedResolutionId = MappedResolutionIds.FirstOrDefault()?.Value;
        SelectedDuplexId = MappedDuplexIds.FirstOrDefault()?.Value;
        SelectedPageSizeId = MappedPageSizeIds.FirstOrDefault()?.Value;
        SelectedPixelTypeId = MappedPixelTypeIds.FirstOrDefault()?.Value;

        StateHasChanged();
    }
}
