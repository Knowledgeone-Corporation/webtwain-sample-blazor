@inject IJSRuntime jsRuntime
@using SampleWebsiteBlazorWasm.Shared

@if(IsDisplayUI)
{
    <div>
    <div class="twain-feature-group">
        <label class="scanning-label mt-2">Device</label>
        <select @bind="SelectedDevice" class="form-control">
            @foreach (var item in MappedDevices)
            {
                <option value="@item.Value">@item.Display</option>
            }
        </select>
    </div>

    <div class="twain-feature-group">
        <label class="scanning-label mt-2">Output File Name</label>
        <input type="text" @bind="Filename" class="form-control" />
    </div>

    @if (MappedFiletypes.Any())
    {
        <div class="twain-feature-group">
            <label class="scanning-label mt-2">Output File Type</label>
            <select @bind="SelectedFileType" class="form-control">
                @foreach (var item in MappedFiletypes)
                {
                    <option value="@item.Value">@item.Display</option>
                }
            </select>
        </div>
    }

    @if (MappedOcrOptions.Any())
    {
        <div class="twain-feature-group">
            <label class="scanning-label mt-2">OCR Type</label>
            <select @bind="SelectedOcrType" class="form-control">

                @foreach (var item in MappedOcrOptions)
                {
                    <option value="@item.Value">@item.Display</option>
                }

            </select>
        </div>
    }

    @if (MappedSaveToOptions.Any())
    {
        <div class="twain-feature-group">
            <label class="scanning-label mt-2">Save To</label>
            <select @bind="SelectedSaveToType" class="form-control">
                @foreach (var item in MappedSaveToOptions)
                {
                    <option value="@item.Value">@item.Display</option>
                }

            </select>
        </div>
    }

    <br />

    <div class="input-group">
        <div class="input-group-btn">
            <button type="button" class="btn btn-primary" aria-label="Bold" @onclick="OnClick">
                <span>Scan</span>
            </button>
        </div>
    </div>
</div>
}

@code {
    private bool IsDisplayUI = false;

    public string SelectedDevice { get; set; }
    public string SelectedOcrType { get; set; }
    public string SelectedInterfaceType { get; set; }
    public string SelectedFileType { get; set; }
    public string SelectedSaveToType { get; set; }
    public string Filename { get; set; }
    public TwainOptionsModel TwainOptions { get; set; }
    public List<DeviceModel> Devices { get; set; } = new List<DeviceModel>();
    public List<MappedOption> MappedOcrOptions { get; set; } = new List<MappedOption>();
    public List<MappedOption> MappedFiletypes { get; set; } = new List<MappedOption>();
    public List<MappedOption> MappedDevices { get; set; } = new List<MappedOption>();
    public List<MappedOption> MappedSaveToOptions { get; set; } = new List<MappedOption>();

    [Parameter]
    public EventCallback<AcquireEventModel> CompleteAcquire {get; set;}

    protected override async Task OnInitializedAsync()
    {
        TwainOptions = await jsRuntime.InvokeAsync<TwainOptionsModel>("k1_Options");
        await jsRuntime.InvokeVoidAsync("k1_setConfig", TwainOptions.ScannerInterface.Desktop);

        var configuration = await jsRuntime.InvokeAsync<object>("k1_renderDesktop");
        await jsRuntime.InvokeVoidAsync("k1_resetService");
        await Task.Delay(4000);
        IsDisplayUI = true;

        var oDevices = await jsRuntime.InvokeAsync<object>("k1_getDevices");
        var devices = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DeviceModel>>(oDevices.ToString());

        MappedDevices = devices.Select(x => new MappedOption { Display = x.Name, Value = x.Id }).ToList();
        MappedOcrOptions = TwainOptions.OcrType.OcrTypes.Select(x => new MappedOption { Display = x.Key, Value = x.Value }).ToList();
        MappedFiletypes = TwainOptions.OutputFileType.OutputFileTypes.Select(x => new MappedOption { Display = x.Key, Value = x.Value }).ToList();
        MappedSaveToOptions = TwainOptions.SaveToType.SaveToTypes.Select(x => new MappedOption { Display = x.Key, Value = x.Value }).ToList();

        SelectedDevice = MappedDevices.FirstOrDefault()?.Value;
        SelectedOcrType = MappedOcrOptions.FirstOrDefault()?.Value;
        SelectedFileType = MappedFiletypes.FirstOrDefault()?.Value;
        SelectedSaveToType = MappedSaveToOptions.FirstOrDefault()?.Value;
        Filename = $"ScanFile{new Random().Next(2000000)}";

        await base.OnInitializedAsync();
    }

    async void OnClick(MouseEventArgs mouseEventArgs)
    {
        IsDisplayUI = false;
        var acquireRequest = new
        {
            deviceId = SelectedDevice,
            filetype = SelectedFileType,
            ocrType = SelectedOcrType,
            filename = Filename,
            saveToType = SelectedSaveToType
        };

        try
        {
            var acquireResponse = await jsRuntime.InvokeAsync<string>("k1_acquire", acquireRequest);

            await CompleteAcquire.InvokeAsync(new AcquireEventModel
            {
                AcquireResponse = acquireResponse,
                IsUpload = SelectedSaveToType == TwainOptions.SaveToType.Upload.ToString()
            });
        }
        catch
        {
            await CompleteAcquire.InvokeAsync(new AcquireEventModel
            {
                AcquireError = "Encountered an error. Review console and network logs."
            });
        }

        StateHasChanged();
    }
}
